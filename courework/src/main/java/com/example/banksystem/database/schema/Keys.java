/*
 * This file is generated by jOOQ.
 */
package com.example.banksystem.database.schema;


import com.example.banksystem.database.schema.tables.BankInfo;
import com.example.banksystem.database.schema.tables.BankType;
import com.example.banksystem.database.schema.tables.User;
import com.example.banksystem.database.schema.tables.UserInfo;
import com.example.banksystem.database.schema.tables.records.BankInfoRecord;
import com.example.banksystem.database.schema.tables.records.BankTypeRecord;
import com.example.banksystem.database.schema.tables.records.UserInfoRecord;
import com.example.banksystem.database.schema.tables.records.UserRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<BankInfoRecord> BANK_INFO_PKEY = Internal.createUniqueKey(BankInfo.BANK_INFO, DSL.name("bank_info_pkey"), new TableField[] { BankInfo.BANK_INFO.ID }, true);
    public static final UniqueKey<BankTypeRecord> BANK_TYPE_NAME_KEY = Internal.createUniqueKey(BankType.BANK_TYPE, DSL.name("bank_type_name_key"), new TableField[] { BankType.BANK_TYPE.NAME }, true);
    public static final UniqueKey<BankTypeRecord> BANK_TYPE_PKEY = Internal.createUniqueKey(BankType.BANK_TYPE, DSL.name("bank_type_pkey"), new TableField[] { BankType.BANK_TYPE.ID }, true);
    public static final UniqueKey<UserRecord> USER_PKEY = Internal.createUniqueKey(User.USER, DSL.name("user_pkey"), new TableField[] { User.USER.ID }, true);
    public static final UniqueKey<UserInfoRecord> USER_INFO_PKEY = Internal.createUniqueKey(UserInfo.USER_INFO, DSL.name("user_info_pkey"), new TableField[] { UserInfo.USER_INFO.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<BankInfoRecord, BankTypeRecord> BANK_INFO__FK_BANK_ID = Internal.createForeignKey(BankInfo.BANK_INFO, DSL.name("fk_bank_id"), new TableField[] { BankInfo.BANK_INFO.BANK_ID }, Keys.BANK_TYPE_PKEY, new TableField[] { BankType.BANK_TYPE.ID }, true);
    public static final ForeignKey<UserInfoRecord, BankTypeRecord> USER_INFO__FK_BANK_ID = Internal.createForeignKey(UserInfo.USER_INFO, DSL.name("fk_bank_id"), new TableField[] { UserInfo.USER_INFO.BANK_ID }, Keys.BANK_TYPE_PKEY, new TableField[] { BankType.BANK_TYPE.ID }, true);
    public static final ForeignKey<UserInfoRecord, UserRecord> USER_INFO__FK_USER_ID = Internal.createForeignKey(UserInfo.USER_INFO, DSL.name("fk_user_id"), new TableField[] { UserInfo.USER_INFO.USER_ID }, Keys.USER_PKEY, new TableField[] { User.USER.ID }, true);
}
